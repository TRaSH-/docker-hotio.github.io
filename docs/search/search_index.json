{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Huh? What does hotio do? I build and maintain Docker images. When joining the discord server you'll get access to the #image-builds channel and you can keep an eye on when your favorite app has released a new update. All the updating of docker images is automated, giving you the fastest updates. We're not just building them and pushing them out though...no, every app is tested and when they fail the test, pushing to the registries is cancelled. This for the most part ensures your system remains operational when you are doing auto-updates and are not paying attention. The images get pushed to DockerHub and ghcr.io . They can then be pulled from DockerHub with docker pull hotio/... and from ghcr.io with docker pull ghcr.io/hotio/... . On this website you'll also find all the documentation needed to get the containers running. All commands provided include the most basic to get the container running. In most cases you'll have to add additional volumes to get access to your other files that every app needs. Almost all the commands will start with docker run -rm ... , which is the same as docker create , followed by docker start . The argument --rm will make sure that when we exit the container, it'll get deleted. As you might have guessed, these command are not suited for longterm use. For that we suggest to maybe use compose or integrate the commands with systemd . Images where you see a mention of ENTRYPOINT are meant to be used like any other cli app, except that they are containerized. If you like what I do, you know the drill... Logo made possible by Freepik from flaticon.com .","title":"Home"},{"location":"arr-discord-notifier/","text":"Arr Discord Notifier sends pretty notifications to a discord webhook. The Radarr and Sonarr v3 (only v3 is supported) docker images come bundled with this script, but it can also be used on its own. Configuration Add a Custom Script to the Connect settings in Sonarr/Radarr as seen below. Then add the environment variable DISCORD_WEBHOOK with your webhook url provided by Discord to the container. After that hit the Test button and you should see a notification appear in your discord channel. If you also configure the environment variable TMDB_API_KEY , when possible it will use an episode still as a backdrop image and add a Cast field. If you want to hide some fields, you can use DROP_FIELDS=\"backdrop overview release airdate\" as a variable, all field names in lowercase, backdrop and poster are valid values too. Sending to multiple webhooks can be done with additional variables like DISCORD_WEBHOOK_0 and DROP_FIELDS_0 . By default the hostname is used as the Author of the notification, you can modify this by changing the hostname or the variable AUTHOR_NAME . Sample images","title":"Arr Discord Notifier"},{"location":"arr-discord-notifier/#configuration","text":"Add a Custom Script to the Connect settings in Sonarr/Radarr as seen below. Then add the environment variable DISCORD_WEBHOOK with your webhook url provided by Discord to the container. After that hit the Test button and you should see a notification appear in your discord channel. If you also configure the environment variable TMDB_API_KEY , when possible it will use an episode still as a backdrop image and add a Cast field. If you want to hide some fields, you can use DROP_FIELDS=\"backdrop overview release airdate\" as a variable, all field names in lowercase, backdrop and poster are valid values too. Sending to multiple webhooks can be done with additional variables like DISCORD_WEBHOOK_0 and DROP_FIELDS_0 . By default the hostname is used as the Author of the notification, you can modify this by changing the hostname or the variable AUTHOR_NAME .","title":"Configuration"},{"location":"arr-discord-notifier/#sample-images","text":"","title":"Sample images"},{"location":"containers/apprise/","text":"apprise Starting the container Just the basics to get the container running: docker run --rm hotio/apprise ... The default ENTRYPOINT is apprise . Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"apprise"},{"location":"containers/apprise/#apprise","text":"","title":"apprise"},{"location":"containers/apprise/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/apprise ... The default ENTRYPOINT is apprise .","title":"Starting the container"},{"location":"containers/apprise/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/autoscan/","text":"autoscan Starting the container Just the basics to get the container running: docker run --rm \\ --name autoscan \\ -p 3030 :3030 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e AUTOSCAN_VERBOSITY = 0 \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ hotio/autoscan The highlighted variables are all optional, the values you see are the defaults. If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/app/plex.token does not exist, an attempt is made to get a Plex token for Autoscan. Tags Tag Upstream release (latest) GitHub releases nightly Every commit to master You can also find tags that reference a commit or version number. Configuration location Your autoscan configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"autoscan"},{"location":"containers/autoscan/#autoscan","text":"","title":"autoscan"},{"location":"containers/autoscan/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name autoscan \\ -p 3030 :3030 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e AUTOSCAN_VERBOSITY = 0 \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ hotio/autoscan The highlighted variables are all optional, the values you see are the defaults. If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/app/plex.token does not exist, an attempt is made to get a Plex token for Autoscan.","title":"Starting the container"},{"location":"containers/autoscan/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to master You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/autoscan/#configuration-location","text":"Your autoscan configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/autoscan/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/autoscan/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/base/","text":"base Tags Tag Description bionic Based on Ubuntu 18.04 focal Based on Ubuntu 20.04 alpine Based on Alpine 3.12 You can also find tags that reference a commit or version number.","title":"base"},{"location":"containers/base/#base","text":"","title":"base"},{"location":"containers/base/#tags","text":"Tag Description bionic Based on Ubuntu 18.04 focal Based on Ubuntu 20.04 alpine Based on Alpine 3.12 You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/bazarr/","text":"bazarr Starting the container Just the basics to get the container running: docker run --rm \\ --name bazarr \\ -p 6767 :6767 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/bazarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) GitHub releases nightly Every commit to development branch You can also find tags that reference a commit or version number. Configuration location Your bazarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"bazarr"},{"location":"containers/bazarr/#bazarr","text":"","title":"bazarr"},{"location":"containers/bazarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name bazarr \\ -p 6767 :6767 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/bazarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/bazarr/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to development branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/bazarr/#configuration-location","text":"Your bazarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/bazarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/bazarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/borg/","text":"borg Starting the container Just the basics to get the container running: docker run --rm hotio/borg ... The default ENTRYPOINT is borg . Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"borg"},{"location":"containers/borg/#borg","text":"","title":"borg"},{"location":"containers/borg/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/borg ... The default ENTRYPOINT is borg .","title":"Starting the container"},{"location":"containers/borg/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/cloudflare-ddns/","text":"cloudflare-ddns Starting the container Just the basics to get the container running: docker run --rm \\ --name cloudflare-ddns \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e INTERVAL = 300 \\ -e DETECTION_MODE = \"dig-whoami.cloudflare\" \\ -e LOG_LEVEL = 3 \\ -e APPRISE = \"\" \\ -e CF_USER = \"your.cf.email@example.com\" \\ -e CF_APIKEY = \"your.global.apikey\" \\ -e CF_APITOKEN = \"\" \\ -e CF_APITOKEN_ZONE = \"\" \\ -e CF_HOSTS = \"test.example.com;test.foobar.com;test2.foobar.com\" \\ -e CF_ZONES = \"example.com;foobar.com;foobar.com\" \\ -e CF_RECORDTYPES = \"A;A;AAAA\" \\ -v /<host_folder_config>:/config \\ hotio/cloudflare-ddns The highlighted variables are all optional, the values you see are the defaults. Possible values for DETECTION_MODE are dig-google.com , dig-opendns.com , dig-whoami.cloudflare , curl-icanhazip.com , curl-wtfismyip.com , curl-showmyip.ca , curl-da.gd , curl-seeip.org and curl-ifconfig.co . If you want to get the local ip from a network interface, use something like local:eth0 as DETECTION_MODE . Notice that we give 3 values each time for CF_HOSTS , CF_ZONES and CF_RECORDTYPES . In our example, the domain test.foobar.com belonging to the zone foobar.com will have its A record updated with an ipv4 ip. If you use CF_APITOKEN , you can leave CF_USER and CF_APIKEY empty. IMPORTANT: All the domain names in CF_HOSTS should have properly configured DNS records on Cloudflare, they will not be created. Tags Tag Description release (latest) The main branch You can also find tags that reference a commit or version number. Zone ID Instead of the zone_name , you can also fill in a zone_id in CF_ZONES . When using a zone_id , you can use a scoped token ( CF_APITOKEN ) that only needs the Zone - DNS - Edit permissions. This improves security. The configuration could look like the example below. -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;dccbe6grakumohwwd4amh4o46yupepn8\" -e CF_RECORDTYPES = \"A;A\" Seperate API Tokens If you do not prefer to use a zone_id , but prefer some more security, you can use 2 seperate tokens. CF_APITOKEN configured with: Permissions Zone - DNS - Edit Zone Resources Include - Specific zone - example.com Include - Specific zone - foobar.com CF_APITOKEN_ZONE configured with: Permissions Zone - Zone - Read Zone Resources Include - All zones Leaving CF_APITOKEN_ZONE blank would mean that only CF_APITOKEN will be used and thus that token should have all required permissions. Which usually means that the token could edit all zones or not be able to fetch the zone_id from the zone_name . Configuration combination examples Below are some example configuration combinations, ordered from most secure to least secure. We use a zone_id so that our token only needs the permissions Zone - DNS - Edit . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use additionally a CF_APITOKEN_ZONE with the permissions Zone - Zone - Read to query the zones and getting the zone_id . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_APITOKEN_ZONE = \"8m4TxzWb9QHXEpTwQDMugkKuHRavsxoK8qmJ4P7M\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use only CF_APITOKEN , but with the permissions Zone - DNS - Edit and Zone - Zone - Read . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use CF_USER and CF_APIKEY , basically giving full control over our account. -e CF_USER = \"your.cf.email@example.com\" -e CF_APIKEY = \"your.global.apikey\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" Example of the log output 2020-05-17 17:20:54 - INFO - IPv4 detected by [dig-whoami.cloudflare] is [1.1.1.1]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Retrieved zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Zone ID [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] found for zone [example.com]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading DNS record from Cloudflare. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Writing DNS record to cache file [/config/app/cf-ddns-A-vpn.example.com.cache]. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Checking if update is needed. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] No update needed. 2020-05-17 17:20:55 - INFO - Going to sleep for [300] seconds... Log levels For LOG_LEVEL you can pick 0 , 1 , 2 or 3 . 0 will give no log output. It's not recommended to use. 1 will give you the following output types. It's the recommended value when all things are configured and running as expected. UPDATE, WARNING, ERROR 2 will give you the following output types. Use this if you always wanna see what's going on, but 3 gives you too much output. UPDATE, WARNING, ERROR, INFO 3 will give you the following output types. This is the default. UPDATE, WARNING, ERROR, INFO, DEBUG JSON log Every IP update is also logged to /config/app/cf-ddns-updates.json . This can be used with the Telegraf JSON parser and the tail input, to get your domain updates into InfluxDB. Example output below. { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:27:14Z\" } { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:29:26Z\" } Cached results from Cloudflare The returned results from Cloudflare are cached. This means minimal api calls to Cloudflare. If you have made any manual changes to the IP on the Cloudflare webinterface, for instance when wanting to test an update, a container restart is needed to clear the cache. The proxy setting (orange cloud) and TTL is also cached and re-set based on the previous value, so if you made any modifications to these settings, you should restart the container so that the script is aware of the new settings. Sending notifications using Apprise You can send notifications when a DNS record gets updated with a new IP using Apprise . Use the environment variable APPRISE to configure notifications, see below for some examples. -e APPRISE = \"pover://user@token\" -e APPRISE = \"pover://user@token;discord://webhook_id/webhook_token\"","title":"cloudflare-ddns"},{"location":"containers/cloudflare-ddns/#cloudflare-ddns","text":"","title":"cloudflare-ddns"},{"location":"containers/cloudflare-ddns/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name cloudflare-ddns \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e INTERVAL = 300 \\ -e DETECTION_MODE = \"dig-whoami.cloudflare\" \\ -e LOG_LEVEL = 3 \\ -e APPRISE = \"\" \\ -e CF_USER = \"your.cf.email@example.com\" \\ -e CF_APIKEY = \"your.global.apikey\" \\ -e CF_APITOKEN = \"\" \\ -e CF_APITOKEN_ZONE = \"\" \\ -e CF_HOSTS = \"test.example.com;test.foobar.com;test2.foobar.com\" \\ -e CF_ZONES = \"example.com;foobar.com;foobar.com\" \\ -e CF_RECORDTYPES = \"A;A;AAAA\" \\ -v /<host_folder_config>:/config \\ hotio/cloudflare-ddns The highlighted variables are all optional, the values you see are the defaults. Possible values for DETECTION_MODE are dig-google.com , dig-opendns.com , dig-whoami.cloudflare , curl-icanhazip.com , curl-wtfismyip.com , curl-showmyip.ca , curl-da.gd , curl-seeip.org and curl-ifconfig.co . If you want to get the local ip from a network interface, use something like local:eth0 as DETECTION_MODE . Notice that we give 3 values each time for CF_HOSTS , CF_ZONES and CF_RECORDTYPES . In our example, the domain test.foobar.com belonging to the zone foobar.com will have its A record updated with an ipv4 ip. If you use CF_APITOKEN , you can leave CF_USER and CF_APIKEY empty. IMPORTANT: All the domain names in CF_HOSTS should have properly configured DNS records on Cloudflare, they will not be created.","title":"Starting the container"},{"location":"containers/cloudflare-ddns/#tags","text":"Tag Description release (latest) The main branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/cloudflare-ddns/#zone-id","text":"Instead of the zone_name , you can also fill in a zone_id in CF_ZONES . When using a zone_id , you can use a scoped token ( CF_APITOKEN ) that only needs the Zone - DNS - Edit permissions. This improves security. The configuration could look like the example below. -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;dccbe6grakumohwwd4amh4o46yupepn8\" -e CF_RECORDTYPES = \"A;A\"","title":"Zone ID"},{"location":"containers/cloudflare-ddns/#seperate-api-tokens","text":"If you do not prefer to use a zone_id , but prefer some more security, you can use 2 seperate tokens. CF_APITOKEN configured with: Permissions Zone - DNS - Edit Zone Resources Include - Specific zone - example.com Include - Specific zone - foobar.com CF_APITOKEN_ZONE configured with: Permissions Zone - Zone - Read Zone Resources Include - All zones Leaving CF_APITOKEN_ZONE blank would mean that only CF_APITOKEN will be used and thus that token should have all required permissions. Which usually means that the token could edit all zones or not be able to fetch the zone_id from the zone_name .","title":"Seperate API Tokens"},{"location":"containers/cloudflare-ddns/#configuration-combination-examples","text":"Below are some example configuration combinations, ordered from most secure to least secure. We use a zone_id so that our token only needs the permissions Zone - DNS - Edit . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use additionally a CF_APITOKEN_ZONE with the permissions Zone - Zone - Read to query the zones and getting the zone_id . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_APITOKEN_ZONE = \"8m4TxzWb9QHXEpTwQDMugkKuHRavsxoK8qmJ4P7M\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use only CF_APITOKEN , but with the permissions Zone - DNS - Edit and Zone - Zone - Read . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use CF_USER and CF_APIKEY , basically giving full control over our account. -e CF_USER = \"your.cf.email@example.com\" -e CF_APIKEY = \"your.global.apikey\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\"","title":"Configuration combination examples"},{"location":"containers/cloudflare-ddns/#example-of-the-log-output","text":"2020-05-17 17:20:54 - INFO - IPv4 detected by [dig-whoami.cloudflare] is [1.1.1.1]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Retrieved zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Zone ID [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] found for zone [example.com]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading DNS record from Cloudflare. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Writing DNS record to cache file [/config/app/cf-ddns-A-vpn.example.com.cache]. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Checking if update is needed. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] No update needed. 2020-05-17 17:20:55 - INFO - Going to sleep for [300] seconds...","title":"Example of the log output"},{"location":"containers/cloudflare-ddns/#log-levels","text":"For LOG_LEVEL you can pick 0 , 1 , 2 or 3 . 0 will give no log output. It's not recommended to use. 1 will give you the following output types. It's the recommended value when all things are configured and running as expected. UPDATE, WARNING, ERROR 2 will give you the following output types. Use this if you always wanna see what's going on, but 3 gives you too much output. UPDATE, WARNING, ERROR, INFO 3 will give you the following output types. This is the default. UPDATE, WARNING, ERROR, INFO, DEBUG","title":"Log levels"},{"location":"containers/cloudflare-ddns/#json-log","text":"Every IP update is also logged to /config/app/cf-ddns-updates.json . This can be used with the Telegraf JSON parser and the tail input, to get your domain updates into InfluxDB. Example output below. { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:27:14Z\" } { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:29:26Z\" }","title":"JSON log"},{"location":"containers/cloudflare-ddns/#cached-results-from-cloudflare","text":"The returned results from Cloudflare are cached. This means minimal api calls to Cloudflare. If you have made any manual changes to the IP on the Cloudflare webinterface, for instance when wanting to test an update, a container restart is needed to clear the cache. The proxy setting (orange cloud) and TTL is also cached and re-set based on the previous value, so if you made any modifications to these settings, you should restart the container so that the script is aware of the new settings.","title":"Cached results from Cloudflare"},{"location":"containers/cloudflare-ddns/#sending-notifications-using-apprise","text":"You can send notifications when a DNS record gets updated with a new IP using Apprise . Use the environment variable APPRISE to configure notifications, see below for some examples. -e APPRISE = \"pover://user@token\" -e APPRISE = \"pover://user@token;discord://webhook_id/webhook_token\"","title":"Sending notifications using Apprise"},{"location":"containers/crop/","text":"crop Starting the container Just the basics to get the container running: docker run --rm hotio/crop ... The default ENTRYPOINT is crop . Tags Tag Description release (latest) GitHub releases nightly Every commit to develop branch You can also find tags that reference a commit or version number.","title":"crop"},{"location":"containers/crop/#crop","text":"","title":"crop"},{"location":"containers/crop/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/crop ... The default ENTRYPOINT is crop .","title":"Starting the container"},{"location":"containers/crop/#tags","text":"Tag Description release (latest) GitHub releases nightly Every commit to develop branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/hd-idle/","text":"hd-idle Starting the container Just the basics to get the container running: docker run --rm \\ --name hd-idle \\ --privileged = true \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e IDLE_TIME = 1800 \\ -v /<host_folder_config>:/config \\ hotio/hd-idle The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number. Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"hd-idle"},{"location":"containers/hd-idle/#hd-idle","text":"","title":"hd-idle"},{"location":"containers/hd-idle/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name hd-idle \\ --privileged = true \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e IDLE_TIME = 1800 \\ -v /<host_folder_config>:/config \\ hotio/hd-idle The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/hd-idle/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/hd-idle/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/hd-idle/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/jackett/","text":"jackett Starting the container Just the basics to get the container running: docker run --rm \\ --name jackett \\ -p 9117 :9117 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/jackett The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number. Configuration location Your jackett configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"jackett"},{"location":"containers/jackett/#jackett","text":"","title":"jackett"},{"location":"containers/jackett/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name jackett \\ -p 9117 :9117 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/jackett The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/jackett/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/jackett/#configuration-location","text":"Your jackett configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/jackett/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/jackett/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/jellyfin/","text":"jellyfin Starting the container Just the basics to get the container running: docker run --rm \\ --name jellyfin \\ -p 8096 :8096 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/jellyfin The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) Releases nightly Every commit to master branch You can also find tags that reference a commit or version number. Configuration location Your jellyfin configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . The following jellyfin path locations are used by default. JELLYFIN_CONFIG_DIR = \"/config/app\" JELLYFIN_DATA_DIR = \"/config/app/data\" JELLYFIN_LOG_DIR = \"/config/app/log\" JELLYFIN_CACHE_DIR = \"/config/app/cache\" You can override these locations by setting them to a different value with a docker environment variable. Hardware support To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions. For Raspberry Pi OpenMAX you'll need to use --device=/dev/vchiq:/dev/vchiq -v /opt/vc/lib:/opt/vc/lib , V4L2 will need --device=/dev/video10:/dev/video10 --device=/dev/video11:/dev/video11 --device=/dev/video12:/dev/video12 and MMAL needs --device=/dev/vcsm:/dev/vcsm or --device=/dev/vc-mem:/dev/vc-mem . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"jellyfin"},{"location":"containers/jellyfin/#jellyfin","text":"","title":"jellyfin"},{"location":"containers/jellyfin/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name jellyfin \\ -p 8096 :8096 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/jellyfin The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/jellyfin/#tags","text":"Tag Upstream release (latest) Releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/jellyfin/#configuration-location","text":"Your jellyfin configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . The following jellyfin path locations are used by default. JELLYFIN_CONFIG_DIR = \"/config/app\" JELLYFIN_DATA_DIR = \"/config/app/data\" JELLYFIN_LOG_DIR = \"/config/app/log\" JELLYFIN_CACHE_DIR = \"/config/app/cache\" You can override these locations by setting them to a different value with a docker environment variable.","title":"Configuration location"},{"location":"containers/jellyfin/#hardware-support","text":"To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions. For Raspberry Pi OpenMAX you'll need to use --device=/dev/vchiq:/dev/vchiq -v /opt/vc/lib:/opt/vc/lib , V4L2 will need --device=/dev/video10:/dev/video10 --device=/dev/video11:/dev/video11 --device=/dev/video12:/dev/video12 and MMAL needs --device=/dev/vcsm:/dev/vcsm or --device=/dev/vc-mem:/dev/vc-mem .","title":"Hardware support"},{"location":"containers/jellyfin/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/jellyfin/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/lidarr/","text":"lidarr Starting the container Just the basics to get the container running: docker run --rm \\ --name lidarr \\ -p 8686 :8686 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/lidarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) master testing develop nightly nightly You can also find tags that reference a commit or version number. Configuration location Your lidarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"lidarr"},{"location":"containers/lidarr/#lidarr","text":"","title":"lidarr"},{"location":"containers/lidarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name lidarr \\ -p 8686 :8686 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/lidarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/lidarr/#tags","text":"Tag Upstream release (latest) master testing develop nightly nightly You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/lidarr/#configuration-location","text":"Your lidarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/lidarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/lidarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/mergerfs/","text":"mergerfs Starting the container Just the basics to get the container running: docker run --rm hotio/mergerfs ... The default ENTRYPOINT is mergerfs -f . Tags Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number. Using the mergerfs mount on the host By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working. Extra docker privileges In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using a mergerfs mount. --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"mergerfs"},{"location":"containers/mergerfs/#mergerfs","text":"","title":"mergerfs"},{"location":"containers/mergerfs/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/mergerfs ... The default ENTRYPOINT is mergerfs -f .","title":"Starting the container"},{"location":"containers/mergerfs/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/mergerfs/#using-the-mergerfs-mount-on-the-host","text":"By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working.","title":"Using the mergerfs mount on the host"},{"location":"containers/mergerfs/#extra-docker-privileges","text":"In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using a mergerfs mount. --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"Extra docker privileges"},{"location":"containers/mono/","text":"mono Tags Tag Description bionic Based on Ubuntu 18.04 focal Based on Ubuntu 20.04 You can also find tags that reference a commit or version number.","title":"mono"},{"location":"containers/mono/#mono","text":"","title":"mono"},{"location":"containers/mono/#tags","text":"Tag Description bionic Based on Ubuntu 18.04 focal Based on Ubuntu 20.04 You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/mylar3/","text":"mylar3 Starting the container Just the basics to get the container running: docker run --rm \\ --name mylar3 \\ -p 8090 :8090 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/mylar3 The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) GitHub releases nightly Every commit to python3-dev branch You can also find tags that reference a commit or version number. Configuration location Your mylar3 configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"mylar3"},{"location":"containers/mylar3/#mylar3","text":"","title":"mylar3"},{"location":"containers/mylar3/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name mylar3 \\ -p 8090 :8090 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/mylar3 The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/mylar3/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to python3-dev branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/mylar3/#configuration-location","text":"Your mylar3 configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/mylar3/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/mylar3/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/nzbget/","text":"nzbget Starting the container Just the basics to get the container running: docker run --rm \\ --name nzbget \\ -p 6789 :6789 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/nzbget The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number. Configuration location Your nzbget configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"nzbget"},{"location":"containers/nzbget/#nzbget","text":"","title":"nzbget"},{"location":"containers/nzbget/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name nzbget \\ -p 6789 :6789 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/nzbget The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/nzbget/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/nzbget/#configuration-location","text":"Your nzbget configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/nzbget/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/nzbget/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/nzbhydra2/","text":"nzbhydra2 Starting the container Just the basics to get the container running: docker run --rm \\ --name nzbhydra2 \\ -p 5076 :5076 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/nzbhydra2 The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number. Configuration location Your nzbhydra2 configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"nzbhydra2"},{"location":"containers/nzbhydra2/#nzbhydra2","text":"","title":"nzbhydra2"},{"location":"containers/nzbhydra2/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name nzbhydra2 \\ -p 5076 :5076 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/nzbhydra2 The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/nzbhydra2/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/nzbhydra2/#configuration-location","text":"Your nzbhydra2 configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/nzbhydra2/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/nzbhydra2/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/ombi/","text":"ombi Starting the container Just the basics to get the container running: docker run --rm \\ --name ombi \\ -p 5000 :5000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/ombi The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) v3 releases testing v4 releases You can also find tags that reference a commit or version number. Configuration location Your ombi configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"ombi"},{"location":"containers/ombi/#ombi","text":"","title":"ombi"},{"location":"containers/ombi/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name ombi \\ -p 5000 :5000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/ombi The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/ombi/#tags","text":"Tag Upstream release (latest) v3 releases testing v4 releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/ombi/#configuration-location","text":"Your ombi configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/ombi/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/ombi/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/plex/","text":"plex Starting the container Just the basics to get the container running: docker run --rm \\ --name plex \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ hotio/plex The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. When using the autoscan tag. docker run --rm \\ --name plex-autoscan \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -e PLEXAUTOSCAN_ARGS = \"\" \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ hotio/plex:autoscan If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/plexautoscan/plex.token does not exist, an attempt is made to get a Plex token for PlexAutoscan. Tags Tag Upstream release (latest) Releases autoscan Releases, including Plex Autoscan You can also find tags that reference a commit or version number. Volumes By default the container has 2 volumes defined, the volume /config that contains the configuration files and the volume /transcode which is used as the default transcode directory. Claim your server Go to plex.tv/claim and login with your account, copy the claim code and add it to the environment variable like this -e PLEX_CLAIM=\"claim-xxxxxxxxxxxxxxxxxxxx\" . When starting the new plex server for the first time, the server will be added to your account. Plex Pass If you are a Plex Pass subscriber, you can enable the install of beta builds with -e PLEX_PASS=\"yes\" . When the container starts, a version check is done for the latest beta and installed if a newer version is found. Configuration location Your plex configuration inside the container is stored in /config/app/Plex Media Server , your Preferences.xml file its full path would be /config/app/Plex Media Server/Preferences.xml . Hardware support To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions. Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"plex"},{"location":"containers/plex/#plex","text":"","title":"plex"},{"location":"containers/plex/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name plex \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ hotio/plex The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. When using the autoscan tag. docker run --rm \\ --name plex-autoscan \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -e PLEXAUTOSCAN_ARGS = \"\" \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ hotio/plex:autoscan If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/plexautoscan/plex.token does not exist, an attempt is made to get a Plex token for PlexAutoscan.","title":"Starting the container"},{"location":"containers/plex/#tags","text":"Tag Upstream release (latest) Releases autoscan Releases, including Plex Autoscan You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/plex/#volumes","text":"By default the container has 2 volumes defined, the volume /config that contains the configuration files and the volume /transcode which is used as the default transcode directory.","title":"Volumes"},{"location":"containers/plex/#claim-your-server","text":"Go to plex.tv/claim and login with your account, copy the claim code and add it to the environment variable like this -e PLEX_CLAIM=\"claim-xxxxxxxxxxxxxxxxxxxx\" . When starting the new plex server for the first time, the server will be added to your account.","title":"Claim your server"},{"location":"containers/plex/#plex-pass","text":"If you are a Plex Pass subscriber, you can enable the install of beta builds with -e PLEX_PASS=\"yes\" . When the container starts, a version check is done for the latest beta and installed if a newer version is found.","title":"Plex Pass"},{"location":"containers/plex/#configuration-location","text":"Your plex configuration inside the container is stored in /config/app/Plex Media Server , your Preferences.xml file its full path would be /config/app/Plex Media Server/Preferences.xml .","title":"Configuration location"},{"location":"containers/plex/#hardware-support","text":"To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions.","title":"Hardware support"},{"location":"containers/plex/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/plex/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/plexarr/","text":"plexarr Starting the container Just the basics to get the container running: docker run --rm hotio/plexarr ... The default ENTRYPOINT is plexarr . Getting a Plex token for use in your configuration Run the following command, but replace <plex_username> and <plex_password> with your actual username and password. docker run --rm --entrypoint get-token hotio/plexarr <plex_username> <plex_password> You should see something like this, if all went well: Trying to get a Plex token... Your Plex token is: xxxxxxxxxxxxxxxxxxxx Tags Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"plexarr"},{"location":"containers/plexarr/#plexarr","text":"","title":"plexarr"},{"location":"containers/plexarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/plexarr ... The default ENTRYPOINT is plexarr .","title":"Starting the container"},{"location":"containers/plexarr/#getting-a-plex-token-for-use-in-your-configuration","text":"Run the following command, but replace <plex_username> and <plex_password> with your actual username and password. docker run --rm --entrypoint get-token hotio/plexarr <plex_username> <plex_password> You should see something like this, if all went well: Trying to get a Plex token... Your Plex token is: xxxxxxxxxxxxxxxxxxxx","title":"Getting a Plex token for use in your configuration"},{"location":"containers/plexarr/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/radarr/","text":"radarr Starting the container Just the basics to get the container running: docker run --rm \\ --name radarr \\ -p 7878 :7878 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/radarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) develop, becomes master testing develop nightly nightly musl nightly, runs on Alpine You can also find tags that reference a commit or version number. Configuration location Your radarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"radarr"},{"location":"containers/radarr/#radarr","text":"","title":"radarr"},{"location":"containers/radarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name radarr \\ -p 7878 :7878 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/radarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/radarr/#tags","text":"Tag Upstream release (latest) develop, becomes master testing develop nightly nightly musl nightly, runs on Alpine You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/radarr/#configuration-location","text":"Your radarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/radarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/radarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/rar2fs/","text":"rar2fs Starting the container Just the basics to get the container running: docker run --rm hotio/rar2fs ... The default ENTRYPOINT is rar2fs -f -o auto_unmount . Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number. Using the rar2fs mount on the host By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working. Extra docker privileges In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using a rar2fs mount. --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"rar2fs"},{"location":"containers/rar2fs/#rar2fs","text":"","title":"rar2fs"},{"location":"containers/rar2fs/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/rar2fs ... The default ENTRYPOINT is rar2fs -f -o auto_unmount .","title":"Starting the container"},{"location":"containers/rar2fs/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/rar2fs/#using-the-rar2fs-mount-on-the-host","text":"By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working.","title":"Using the rar2fs mount on the host"},{"location":"containers/rar2fs/#extra-docker-privileges","text":"In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using a rar2fs mount. --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"Extra docker privileges"},{"location":"containers/rclone/","text":"rclone Starting the container Just the basics to get the container running: docker run --rm hotio/rclone ... The default ENTRYPOINT is rclone . Tags Tag Upstream release (latest) Releases testing Beta releases You can also find tags that reference a commit or version number. Using a rclone mount on the host By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working. Extra docker privileges In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using rclone mount . --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"rclone"},{"location":"containers/rclone/#rclone","text":"","title":"rclone"},{"location":"containers/rclone/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/rclone ... The default ENTRYPOINT is rclone .","title":"Starting the container"},{"location":"containers/rclone/#tags","text":"Tag Upstream release (latest) Releases testing Beta releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/rclone/#using-a-rclone-mount-on-the-host","text":"By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working.","title":"Using a rclone mount on the host"},{"location":"containers/rclone/#extra-docker-privileges","text":"In most cases you will need some or all of the following flags added to your command to get the required docker privileges when using rclone mount . --security-opt apparmor:unconfined --cap-add SYS_ADMIN --device /dev/fuse","title":"Extra docker privileges"},{"location":"containers/readarr/","text":"readarr Starting the container Just the basics to get the container running: docker run --rm \\ --name readarr \\ -p 8787 :8787 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/readarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) not yet available testing not yet available nightly nightly You can also find tags that reference a commit or version number. Configuration location Your readarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"readarr"},{"location":"containers/readarr/#readarr","text":"","title":"readarr"},{"location":"containers/readarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name readarr \\ -p 8787 :8787 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/readarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/readarr/#tags","text":"Tag Upstream release (latest) not yet available testing not yet available nightly nightly You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/readarr/#configuration-location","text":"Your readarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/readarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/readarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/requestrr/","text":"requestrr Starting the container Just the basics to get the container running: docker run --rm \\ --name requestrr \\ -p 4545 :4545 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/requestrr The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number. Configuration location Your configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /root/config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"requestrr"},{"location":"containers/requestrr/#requestrr","text":"","title":"requestrr"},{"location":"containers/requestrr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name requestrr \\ -p 4545 :4545 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/requestrr The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/requestrr/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/requestrr/#configuration-location","text":"Your configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /root/config to /config/app .","title":"Configuration location"},{"location":"containers/requestrr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/requestrr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/restic/","text":"restic Starting the container Just the basics to get the container running: docker run --rm hotio/restic ... The default ENTRYPOINT is restic . Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"restic"},{"location":"containers/restic/#restic","text":"","title":"restic"},{"location":"containers/restic/#starting-the-container","text":"Just the basics to get the container running: docker run --rm hotio/restic ... The default ENTRYPOINT is restic .","title":"Starting the container"},{"location":"containers/restic/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/sabnzbd/","text":"sabnzbd Starting the container Just the basics to get the container running: docker run --rm \\ --name sabnzbd \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/sabnzbd The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases nightly Every commit to develop branch You can also find tags that reference a commit or version number. Configuration location Your sabnzbd configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"sabnzbd"},{"location":"containers/sabnzbd/#sabnzbd","text":"","title":"sabnzbd"},{"location":"containers/sabnzbd/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name sabnzbd \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/sabnzbd The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/sabnzbd/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases nightly Every commit to develop branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/sabnzbd/#configuration-location","text":"Your sabnzbd configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/sabnzbd/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/sabnzbd/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/scrutiny/","text":"scrutiny Starting the container Just the basics to get the container running: docker run --rm \\ --name scrutiny \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e INTERVAL = 86400 \\ -e API_ENDPOINT = \"http://localhost:8080\" \\ -e MODE = \"both\" \\ --cap-add SYS_RAWIO \\ --device /dev/sda \\ -v /run/udev:/run/udev:ro \\ -v /<host_folder_config>:/config \\ hotio/scrutiny The highlighted variables are all optional, the values you see are the defaults. For the environment variable MODE you can pick the values both , web or collector to enable the desired operating mode (see below). The INTERVAL variable defines the amount of time in seconds between collector runs, the metrics are pushed to the webinterface located at API_ENDPOINT . When passing through NVMe devices you'll probably have to use --cap-add SYS_ADMIN instead of --cap-add SYS_RAWIO . Deploying as 2 seperate containers docker run --rm \\ --name scrutiny-collector \\ --network my-net \\ -e INTERVAL = 3600 \\ -e API_ENDPOINT = \"http://scrutiny-web:8080\" \\ -e MODE = \"collector\" \\ --cap-add SYS_RAWIO \\ --device /dev/sda \\ -v /run/udev:/run/udev:ro \\ -v /<host_folder_config>:/config \\ hotio/scrutiny docker run --rm \\ --name scrutiny-web \\ --network my-net \\ -p 8080 :8080 \\ -e MODE = \"web\" \\ -v /<host_folder_config>:/config \\ hotio/scrutiny Tags Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number. Configuration location Your scrutiny configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"scrutiny"},{"location":"containers/scrutiny/#scrutiny","text":"","title":"scrutiny"},{"location":"containers/scrutiny/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name scrutiny \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e INTERVAL = 86400 \\ -e API_ENDPOINT = \"http://localhost:8080\" \\ -e MODE = \"both\" \\ --cap-add SYS_RAWIO \\ --device /dev/sda \\ -v /run/udev:/run/udev:ro \\ -v /<host_folder_config>:/config \\ hotio/scrutiny The highlighted variables are all optional, the values you see are the defaults. For the environment variable MODE you can pick the values both , web or collector to enable the desired operating mode (see below). The INTERVAL variable defines the amount of time in seconds between collector runs, the metrics are pushed to the webinterface located at API_ENDPOINT . When passing through NVMe devices you'll probably have to use --cap-add SYS_ADMIN instead of --cap-add SYS_RAWIO .","title":"Starting the container"},{"location":"containers/scrutiny/#deploying-as-2-seperate-containers","text":"docker run --rm \\ --name scrutiny-collector \\ --network my-net \\ -e INTERVAL = 3600 \\ -e API_ENDPOINT = \"http://scrutiny-web:8080\" \\ -e MODE = \"collector\" \\ --cap-add SYS_RAWIO \\ --device /dev/sda \\ -v /run/udev:/run/udev:ro \\ -v /<host_folder_config>:/config \\ hotio/scrutiny docker run --rm \\ --name scrutiny-web \\ --network my-net \\ -p 8080 :8080 \\ -e MODE = \"web\" \\ -v /<host_folder_config>:/config \\ hotio/scrutiny","title":"Deploying as 2 seperate containers"},{"location":"containers/scrutiny/#tags","text":"Tag Upstream release (latest) GitHub releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/scrutiny/#configuration-location","text":"Your scrutiny configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/scrutiny/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/scrutiny/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/sonarr/","text":"sonarr Starting the container Just the basics to get the container running: docker run --rm \\ --name sonarr \\ -p 8989 :8989 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/sonarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files. Tags Tag Upstream release (latest) master testing develop nightly phantom-develop You can also find tags that reference a commit or version number. Configuration location Your sonarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"sonarr"},{"location":"containers/sonarr/#sonarr","text":"","title":"sonarr"},{"location":"containers/sonarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name sonarr \\ -p 8989 :8989 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/sonarr The highlighted variables are all optional, the values you see are the defaults. In most cases you'll need to add an additional volume ( -v ) or more, depending on your own personal preference, to get access to additional files.","title":"Starting the container"},{"location":"containers/sonarr/#tags","text":"Tag Upstream release (latest) master testing develop nightly phantom-develop You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/sonarr/#configuration-location","text":"Your sonarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/sonarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/sonarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/tautulli/","text":"tautulli Starting the container Just the basics to get the container running: docker run --rm \\ --name tautulli \\ -p 8181 :8181 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/tautulli The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number. Configuration location Your tautulli configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"tautulli"},{"location":"containers/tautulli/#tautulli","text":"","title":"tautulli"},{"location":"containers/tautulli/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name tautulli \\ -p 8181 :8181 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/tautulli The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/tautulli/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/tautulli/#configuration-location","text":"Your tautulli configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/tautulli/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/tautulli/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/trackarr/","text":"trackarr Starting the container Just the basics to get the container running: docker run --rm \\ --name trackarr \\ -p 7337 :7337 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/trackarr The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) Releases nightly Every commit to develop branch You can also find tags that reference a commit or version number. Configuration location Your trackarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"trackarr"},{"location":"containers/trackarr/#trackarr","text":"","title":"trackarr"},{"location":"containers/trackarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name trackarr \\ -p 7337 :7337 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -v /<host_folder_config>:/config \\ hotio/trackarr The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/trackarr/#tags","text":"Tag Upstream release (latest) Releases nightly Every commit to develop branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/trackarr/#configuration-location","text":"Your trackarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"containers/trackarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/trackarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"containers/unpackerr/","text":"unpackerr Starting the container Just the basics to get the container running: docker run --rm \\ --name unpackerr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e UN_SONARR_0_URL = \"http://sonarr:8989\" \\ -e UN_SONARR_0_API_KEY = \"<yourapikey>\" \\ -e UN_RADARR_0_URL = \"http://radarr:7878\" \\ -e UN_RADARR_0_API_KEY = \"<yourapikey>\" \\ -e UN_LIDARR_0_URL = \"http://lidarr:8686\" \\ -e UN_LIDARR_0_API_KEY = \"<yourapikey>\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_downloads>:/downloads \\ hotio/unpackerr The highlighted variables are all optional, the values you see are the defaults. Tags Tag Upstream release (latest) GitHub releases testing GitHub pre-releases nightly Every commit to master branch You can also find tags that reference a commit or version number. Configuration You can use docker environment variables or a configuration file that should be stored in /config/app/unpackerr.conf . Don't forget to mount your volume where Unpackerr should look to find your downloads. You should use the same volume as is used in the Sonarr/Radarr/Lidarr containers. More advanced configuration methods are possible too, but take a look at the upstream project page for more info on that. Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"unpackerr"},{"location":"containers/unpackerr/#unpackerr","text":"","title":"unpackerr"},{"location":"containers/unpackerr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm \\ --name unpackerr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -e DEBUG = \"no\" \\ -e UN_SONARR_0_URL = \"http://sonarr:8989\" \\ -e UN_SONARR_0_API_KEY = \"<yourapikey>\" \\ -e UN_RADARR_0_URL = \"http://radarr:7878\" \\ -e UN_RADARR_0_API_KEY = \"<yourapikey>\" \\ -e UN_LIDARR_0_URL = \"http://lidarr:8686\" \\ -e UN_LIDARR_0_API_KEY = \"<yourapikey>\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_downloads>:/downloads \\ hotio/unpackerr The highlighted variables are all optional, the values you see are the defaults.","title":"Starting the container"},{"location":"containers/unpackerr/#tags","text":"Tag Upstream release (latest) GitHub releases testing GitHub pre-releases nightly Every commit to master branch You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"containers/unpackerr/#configuration","text":"You can use docker environment variables or a configuration file that should be stored in /config/app/unpackerr.conf . Don't forget to mount your volume where Unpackerr should look to find your downloads. You should use the same volume as is used in the Sonarr/Radarr/Lidarr containers. More advanced configuration methods are possible too, but take a look at the upstream project page for more info on that.","title":"Configuration"},{"location":"containers/unpackerr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"containers/unpackerr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"}]}