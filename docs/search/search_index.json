{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Here you'll find all the documentation needed to get the containers running. All commands provided include the most basic to get the container running. Almost all the commands will start with docker run -rm ... , which is the same as docker create , followed by docker start . The argument --rm will make sure that when we exit the container, it'll get deleted. As you might have guessed, these command are not suited for longterm use. For that we suggest to maybe use compose or integrate the commands with systemd . All images can be pulled from Docker Hub with docker pull hotio/... and from GitHub Container Registry with docker pull ghcr.io/hotio/... . Images where you see a mention of ENTRYPOINT are ment to be used like any other cli app, except that they are containerized. Logo made possible by Freepik from flaticon.com .","title":"Introduction"},{"location":"#introduction","text":"Here you'll find all the documentation needed to get the containers running. All commands provided include the most basic to get the container running. Almost all the commands will start with docker run -rm ... , which is the same as docker create , followed by docker start . The argument --rm will make sure that when we exit the container, it'll get deleted. As you might have guessed, these command are not suited for longterm use. For that we suggest to maybe use compose or integrate the commands with systemd . All images can be pulled from Docker Hub with docker pull hotio/... and from GitHub Container Registry with docker pull ghcr.io/hotio/... . Images where you see a mention of ENTRYPOINT are ment to be used like any other cli app, except that they are containerized. Logo made possible by Freepik from flaticon.com .","title":"Introduction"},{"location":"Images/hd-idle/","text":"hd-idle Starting the container Just the basics to get the container running: docker run --rm --name hd-idle \\ --privileged=true \\ -v /<host_folder_config>:/config \\ hotio/hd-idle The environment variables below are all optional, the values you see are the defaults. -e PUID=1000 -e PGID=1000 -e UMASK=002 -e TZ=\"Etc/UTC\" -e ARGS=\"\" -e DEBUG=\"no\" -e IDLE_TIME=1800 Tags Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number. Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"hd-idle"},{"location":"Images/hd-idle/#hd-idle","text":"","title":"hd-idle"},{"location":"Images/hd-idle/#starting-the-container","text":"Just the basics to get the container running: docker run --rm --name hd-idle \\ --privileged=true \\ -v /<host_folder_config>:/config \\ hotio/hd-idle The environment variables below are all optional, the values you see are the defaults. -e PUID=1000 -e PGID=1000 -e UMASK=002 -e TZ=\"Etc/UTC\" -e ARGS=\"\" -e DEBUG=\"no\" -e IDLE_TIME=1800","title":"Starting the container"},{"location":"Images/hd-idle/#tags","text":"Tag Upstream release (latest) GitHub releases You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"Images/hd-idle/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"Images/hd-idle/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"},{"location":"Images/radarr/","text":"radarr Starting the container Just the basics to get the container running: docker run --rm --name radarr -p 7878:7878 -v /<host_folder_config>:/config hotio/radarr The environment variables below are all optional, the values you see are the defaults. -e PUID=1000 -e PGID=1000 -e UMASK=002 -e TZ=\"Etc/UTC\" -e ARGS=\"\" -e DEBUG=\"no\" Tags Tag Upstream release (latest) develop, becomes master testing develop nightly nightly musl nightly, runs on Alpine You can also find tags that reference a commit or version number. Configuration location Your radarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app . Executing your own scripts If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\" Troubleshooting a problem By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"radarr"},{"location":"Images/radarr/#radarr","text":"","title":"radarr"},{"location":"Images/radarr/#starting-the-container","text":"Just the basics to get the container running: docker run --rm --name radarr -p 7878:7878 -v /<host_folder_config>:/config hotio/radarr The environment variables below are all optional, the values you see are the defaults. -e PUID=1000 -e PGID=1000 -e UMASK=002 -e TZ=\"Etc/UTC\" -e ARGS=\"\" -e DEBUG=\"no\"","title":"Starting the container"},{"location":"Images/radarr/#tags","text":"Tag Upstream release (latest) develop, becomes master testing develop nightly nightly musl nightly, runs on Alpine You can also find tags that reference a commit or version number.","title":"Tags"},{"location":"Images/radarr/#configuration-location","text":"Your radarr configuration inside the container is stored in /config/app , to migrate from another container, you'd probably have to move your files from /config to /config/app .","title":"Configuration location"},{"location":"Images/radarr/#executing-your-own-scripts","text":"If you have a need to do additional stuff when the container starts or stops, you can mount your script with -v /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or -v /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. #!/usr/bin/with-contenv bash echo \"Hello, this is me, your script.\"","title":"Executing your own scripts"},{"location":"Images/radarr/#troubleshooting-a-problem","text":"By default all output is redirected to /dev/null , so you won't see anything from the application when using docker logs . Most applications write everything to a log file too. If you do want to see this output with docker logs , you can use -e DEBUG=\"yes\" to enable this.","title":"Troubleshooting a problem"}]}